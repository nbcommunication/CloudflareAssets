<?php namespace ProcessWire;

/**
 * Cloudflare Assets
 *
 * #pw-summary Extends Pagefile to use Cloudflare Images, Stream and R2 storage to serve files.
 *
 * @copyright 2023 NB Communication Ltd
 * @license Mozilla Public License v2.0 http://mozilla.org/MPL/2.0/
 *
 * @property string $accountId
 * @property string $accessToken
 * @property string $domain
 * @property string $bucket
 * @property string $accessKeyId
 * @property string $secretAccessKey
 * @property string $customerSubdomain
 * @property string $allowedOriginsList
 * @property string $accountHash
 * @property bool $imageDelivery
 * @property bool $onlyUploads
 *
 * @property array $allowedOrigins
 * @property S3Client $s3
 *
 */

class CloudflareAssets extends WireData implements Module, ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {
		return [
			'title' => 'Cloudflare Assets',
			'version' => 7,
			'summary' => 'Extends Pagefile to use Cloudflare Images, Stream and R2 storage to serve files.',
			'author' => 'nbcommunication',
			'href' => 'https://github.com/nbcommunication/CloudflareAssets',
			'singular' => true,
			'autoload' => true,
			'icon' => 'cloud',
			'requires' => 'ProcessWire>=3.0.210,PHP>=8.1.0',
		];
	}

	const formDataBoundary = '---011000010111000001101001';
	const maxVariants = 100;
	const streamExtensions = 'mp4 mkv mov avi flv webm mpg';

	/**
	 * An array of allowed origins for Streams
	 *
	 * @var array
	 *
	 */
	protected $allowedOrigins = [];

	/**
	 * The AWS S3 client
	 *
	 * @var S3Client
	 *
	 */
	protected $s3 = null;

	/**
	 * Initialize the module
	 *
	 */
	public function init() {

		if($this->accountId && $this->bucket && $this->accessKeyId && $this->secretAccessKey) {

			require_once __DIR__ . '/vendor/autoload.php';

			try {

				$this->s3 = new \Aws\S3\S3Client([
					'region' => 'auto',
					'endpoint' => "https://{$this->accountId}.r2.cloudflarestorage.com",
					'version' => 'latest',
					'credentials' => new \Aws\Credentials\Credentials($this->accessKeyId, $this->secretAccessKey),
				]);

				$this->s3->registerStreamWrapperV2();

				if(!$this->s3->doesBucketExistV2($this->bucket)) {
					$this->s3->createBucket([
						'Bucket' => $this->bucket,
					]);
				}

			} catch(\Aws\S3\Exception\S3Exception $e) {

				$this->log($e->getMessage());

			} catch(\Aws\Exception\AwsException $e) {

				$this->log($e->getMessage());
			}
		}

		$this->allowedOriginsList = trim($this->allowedOriginsList);
		if($this->allowedOriginsList) {
			$this->allowedOrigins = array_map(function($line) {
				return trim($line);
			}, explode("\n", $this->allowedOriginsList));
		}
	}

	/**
	 * When ProcessWire is ready
	 *
	 */
	public function ready() {

		// If authenticated with R2 and we have an API access token
		if($this->s3 && $this->accessToken) {

			// Verify the credentials
			$cacheKey = md5($this->accountId . $this->accessToken);
			$tokenVerified = $this->wire()->cache->getFor($this, $cacheKey);
			if(!$tokenVerified) {
				$response = $this->apiRequest();
				if($response['result']['status'] ?? '' === 'active') {
					$tokenVerified = true;
					$this->wire()->cache->saveFor($this, $cacheKey, 1, WireCache::expireNever);
				} else {
					// Remove access token
					$this->log($this->_('Sorry, the Account ID / Access Token you provided is invalid.'));
					$this->wire()->modules->saveConfig($this, 'accountId', '');
					$this->wire()->modules->saveConfig($this, 'accessToken', '');
				}
			}

			// If authenticated, attach hooks
			if($tokenVerified) {

				// If not the admin
				$page = $this->wire()->page;
				if($page->template->name !== 'admin' && strpos($page->url, $this->wire()->config->urls->admin) !== 0) {

					// If not upload only mode
					if(!$this->onlyUploads) {

						// Check for variations that need to be removed
						$cache = $this->wire()->cache;
						$cacheName = 'removeVariations';
						$toRemove = $cache->getFor($this, $cacheName) ?? [];
						if(count($toRemove)) {
							foreach($toRemove as $filename) {
								$this->wire()->files->unlink($filename);
							}
							$cache->deleteFor($this, $cacheName);
						}

						$this->addHook('Pagefile::url()', $this, 'hookPagefileUrl');
						$this->addHook('Pagefile::httpUrl()', $this, 'hookPagefileHttpUrl');
					}

					$this->addHook('Pageimage::createdVariation', $this, 'hookPageimageCreatedVariation');
					$this->addHookAfter('Page::render', $this, 'hookPageRender', ['priority' => 199]);
				}

				$this->addHookProperty('Pagefile::r2Key', $this, 'hookPagefileR2Key');
				$this->addHookProperty('Pagefile::r2Path', $this, 'hookPagefileR2Path');

				$this->addHookAfter('PagefilesManager::save', $this, 'hookPagefilesManagerSave');

				$this->addHookBefore('InputfieldFile::render', $this, 'hookInputfieldFileRender');

				$this->addHookAfter('Pagefiles::delete', $this, 'hookPagefilesDelete');
			}
		}
	}

	/**
	 * Hook Pagefile::url()
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function hookPagefileUrl(HookEvent $event) {

		$pagefile = $event->object;
		$uid = $this->uid($pagefile);

		if($uid) {

			$url = $this->domain;
			if(strpos($url, '://') === false) {
				$url = "https://$url";
			}

			if($this->useImages($pagefile)) {

				$variant = '';
				if(!$pagefile->original || $pagefile === $pagefile->original) {
					$variant = 'public';
				} else {
					$v = $this->variant($pagefile);
					if($v) {
						$variant = $v;
					} else {
						// The Cloudflare variant does not exist or is not stored for this image
						// We will remove the variation image so that it is regenerated next time
						$cache = $this->wire()->cache;
						$cacheName = 'removeVariations';
						$toRemove = $cache->getFor($this, $cacheName) ?? [];
						$toRemove[$pagefile->basename] = $pagefile->filename;
						$cache->saveFor($this, $cacheName, $toRemove);
					}
				}

				if($variant) {
					$image = "{$this->accountHash}/$uid/$variant";
					if($this->imageDelivery) {
						$url = "https://imagedelivery.net/$image";
					} else {
						$url .= "/cdn-cgi/imagedelivery/$image";
					}
				} else {
					$url = ''; // Use the local URL
				}

			} else if($this->useStream($pagefile)) {
				$url = "https://{$this->customerSubdomain}/$uid/iframe";
			} else {
				$url .= "/$uid";
			}

			if($url) {
				$event->replace = true;
				$event->return = $url;
			}
		}
	}

	/**
	 * Hook Pagefile::httpUrl()
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function hookPagefileHttpUrl(HookEvent $event) {
		$pagefile = $event->object;
		$uid = $this->uid($pagefile);
		if($uid) {
			$event->replace = true;
			$event->return = $event->object->url();
		}
	}

	/**
	 * Hook Pagefile::r2Key
	 *
	 * Return the R2 'Key' for this Pagefile
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function hookPagefileR2Key(HookEvent $event) {
		$event->return = "{$event->object->page->id}/{$event->object->basename}";
	}

	/**
	 * Hook Pagefile::r2Path
	 *
	 * Return the R2 'Path' for this Pagefile
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function hookPagefileR2Path(HookEvent $event) {
		$event->return = "s3://{$this->bucket}/{$event->object->r2Key}";
	}

	/**
	 * Hook PagefilesManager::save
	 *
	 * After a file is added, add it to the appropriate Cloudflare service
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function hookPagefilesManagerSave(HookEvent $event) {

		$page = $event->object->page;
		foreach($page as $value) {

			if($value instanceof Pagefiles && $value->count() && $page->isChanged($value->field->name)) {

				foreach($value as $pagefile) {

					$uid = $this->uid($pagefile);
					if($uid && $this->useStream($pagefile)) {

						// If a video file which already exists
						// Check if we need to update the name from the description

						$response = $this->apiRequest(
							"stream/$uid",
							[],
							'GET'
						);

						if($response['success'] ?? false) {

							$label = $this->getLabel($pagefile);
							if($label !== ($response['result'][0]['meta']['name'] ?? '')) {
								$this->apiRequest(
									"stream/$uid",
									[
										'meta' => [
											'name' => $label,
										],
										'allowedOrigins' => $this->allowedOrigins,
									]
								);
							}

						} else {
							// Not found, check the log for details
						}

					} else {

						// Add to Cloudflare if not already added
						$this->addToCloudflare($pagefile);
					}
				}
			}
		}
	}

	/**
	 * Hook InputfieldFile::render
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function hookInputfieldFileRender(HookEvent $event) {

		if($event->object->value instanceof Pagefiles && $event->object->value->count) {

			foreach($event->object->value as $pagefile) {

				$localFile = $pagefile->filename;
				$remoteFile = $pagefile->r2Path;
				$hasLocalFile = file_exists($localFile);
				$hasRemoteFile = file_exists($remoteFile);

				if($hasLocalFile && !$hasRemoteFile) {

					// Add the file to Cloudflare
					$this->addToCloudflare($pagefile);

					// Save quietly so id can be saved in filedata
					$this->saveQuietly($pagefile);

				} else if(!$hasLocalFile && $hasRemoteFile) {

					// Get the file from R2 and save it locally
					$this->wire()->files->filePutContents($localFile, fopen($remoteFile, 'r'));
				}
			}
		}
	}

	/**
	 * Hook Pagefiles::delete
	 *
	 * When a file is deleted, remove it from Cloudflare
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function hookPagefilesDelete(HookEvent $event) {

		$pagefile = $event->arguments(0);
		$uid = $this->uid($pagefile);

		if($uid) {

			$endpoint = $this->useImages($pagefile) ? 'images/v1' : ($this->useStream($pagefile) ? 'stream' : '');
			if($endpoint) {
				$response = $this->apiRequest(
					"$endpoint/$uid",
					[],
					'DELETE'
				);
			}

			unlink($pagefile->r2Path);
		}
	}

	/**
	 * Hook Pageimage::createdVariation()
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function hookPageimageCreatedVariation(HookEvent $event) {

		$pageimage = $event->arguments(0);
		$data = $event->arguments(1);

		if($this->useImages($pageimage) && $this->uid($pageimage)) {

			$cache = $this->wire()->cache;
			$config = $this->wire()->config;

			$width = $data['width'];
			$height = $data['height'];
			$options = $data['options'];

			// is set and is int
			$_issetInt = function($a, $b) {
				return isset($a[$b]) && is_int($a[$b]);
			};

			// is center
			$_isCenter = function($x, $y) {
				return $x === 0.5 && $y === 0.5;
			};

			// Cloudflare Image settings
			$cfVariantOptions = [
				'fit' => !$width || !$height ?
					'contain' :
					($options['upscaling'] ?? true ? // PW default is true
						'cover' :
						'crop'
					),
			];

			if($width) {
				$cfVariantOptions['width'] = $width;
			}

			if($height) {
				$cfVariantOptions['height'] = $height;
			}

			// Focus point -> Gravity
			$focus = $pageimage->focus();
			if($focus) {
				$x = (float) $focus['left'] / 100;
				$y = (float) $focus['top'] / 100;
				if(!$_isCenter($x, $y)) {
					$cfVariantOptions['gravity'] = [
						'x' => $x,
						'y' => $y,
					];
				}
			}

			// Cropping
			if(isset($options['cropping'])) {
				if(
					(is_bool($options['cropping']) && !$options['cropping']) ||
					(is_string($options['cropping']) && empty($options['cropping']))
				) {

					// No cropping
					$cfVariantOptions['fit'] = 'scale-down';

				} else if(is_string($options['cropping'])) {

					// Convert string crop to xy
					$x = 0.5;
					$y = 0.5;
					switch($options['cropping']) {
						case 'north':
						case 'n':
							$y = 0;
							break;
						case 'northwest':
						case 'nw':
							$x = 0;
							$y = 0;
							break;
						case 'northeast':
						case 'ne':
							$x = 1;
							$y = 0;
							break;
						case 'south':
						case 's':
							$y = 1;
							break;
						case 'southwest':
						case 'sw':
							$x = 0;
							$y = 1;
							break;
						case 'southeast':
						case 'se':
							$x = 1;
							$y = 1;
							break;
						case 'west':
						case 'w':
							$x = 0;
							break;
						case 'east':
						case 'e':
							$x = 1;
							break;
					}

					if(!$_isCenter($x, $y)) {
						$cfVariantOptions['gravity'] = [
							'x' => $x,
							'y' => $y,
						];
					}
				}
			}

			if(
				// gravity passed directly as an option
				isset($options['gravity']) &&
				(
					(
						// is a valid string value
						is_string($options['gravity']) &&
						in_array($options['gravity'], [
							'auto',
							'left',
							'right',
							'top',
							'bottom',
						])
					) ||
					(
						// or is a valid xy value and not center
						is_array($options['gravity']) &&
						($_issetInt($options['gravity'], 'x') && $options['gravity']['x'] <= 1) &&
						($_issetInt($options['gravity'], 'y') && $options['gravity']['y'] <= 1) &&
						!$_isCenter($options['gravity']['x'], $options['gravity']['y'])
					)
				)
			) {
				$cfVariantOptions['gravity'] = $options['gravity'];
			}

			// HiDPI -> DPR
			if($options['hidpi'] ?? false) {
				$options['dpr'] = 2;
				$options['fit'] = 'cover';
				/*
				// For the future perhaps
				// ERROR 5400: Bad request: Variant options do not allow quality
				if(isset($options['hidpiQuality'])) {
					$options['quality'] = $options['hidpiQuality'];
				}
				*/
			}

			// Sharpening -> Sharpen
			if($options['sharpening'] ?? '') {
				$options['sharpen'] = [
					'none' => 0,
					'soft' => 0.25,
					'medium' => 0.5,
					'strong' => 0.8,
				][$options['sharpening']] ?? 0.25; // PW default is soft
			}

			// We also need to generate a variant name
			// There's a limit of 100 alphanumeric chars
			// and we also want it to be readable/understandable
			// e.g. we can tell what the variant is doing
			$cfVariantName = [];

			// Convert array or possible values to a string for the variant name
			$_a2s = function($a, $b = false) {
				if(is_array($a)) {
					$s = '';
					if($b) {
						return json_encode($a);
					} else {
						foreach($a as $k => $v) {
							$s .= substr($k, 0, 1) . $v;
						}
					}
					return $s;
				}
				return $a;
			};

			// Bool values
			if(isset($options['anim'])) {
				$cfVariantOptions['anim'] = (bool) $options['anim'];
				$cfVariantName['an'] = (int) $options['anim'];
			}

			// Integer values
			foreach([
				'blur',
				'dpr',
				'height',
				//'quality',
				'rotate',
				'width',
			] as $key) {
				if(isset($options[$key])) {
					$value = (int) $options[$key];
					if($value) {
						$cfVariantOptions[$key] = $value;
						if(!in_array($key, ['width', 'height'])) {
							$cfVariantName[$key] = $value;
						}
					}
				}
			}

			// Float values
			foreach([
				'brightness',
				'contrast',
				'gamma',
				'sharpen',
			] as $key) {
				if(isset($options[$key])) {
					$value = (float) $options[$key];
					if($value) {
						$max = $key === 'sharpen' ? 10 : 2;
						if($value > $max) {
							$value = $max;
						}
						$cfVariantOptions[$key] = $value;
						$cfVariantName[$key] = $value;
					}
				}
			}

			// String values
			foreach([
				'background',
				'fit',
				'metadata',
			] as $key) {
				if(isset($options[$key])) {
					$value = (string) $options[$key];
					if($value) {
						$cfVariantOptions[$key] = $value;
						if($key !== 'fit') {
							$cfVariantName[$key] = $value;
						}
					}
				}
			}

			// Border
			if(
				isset($options['border']) &&
				is_array($options['border']) &&
				isset($options['border']['color']) &&
				is_string($options['border']['color']) &&
				(
					$_issetInt($options['border'], 'width') ||
					(
						$_issetInt($options['border'], 'top') &&
						$_issetInt($options['border'], 'right') &&
						$_issetInt($options['border'], 'bottom') &&
						$_issetInt($options['border'], 'left')
					)
				)
			) {
				$cfVariantOptions['border'] = $options['border'];
				$cfVariantName['bo'] = $_a2s($options['border']);
			}

			// Trim
			if(
				isset($options['trim']) &&
				$_issetInt($options['trim'], 'top') &&
				$_issetInt($options['trim'], 'right') &&
				$_issetInt($options['trim'], 'bottom') &&
				$_issetInt($options['trim'], 'left')
			) {
				$cfVariantOptions['trim'] = $options['trim'];
				$cfVariantName['tr'] = $_a2s($options['trim']);
			}

			// Let's generate the actual variant name
			// e.g. w100h100con
			$cfVariant = 'w' . ($_issetInt($options, 'nameWidth') ? $options['nameWidth'] : ($cfVariantOptions['width'] ?? 0)) .
				'h' . ($_issetInt($options, 'nameHeight') ? $options['nameHeight'] : ($cfVariantOptions['height'] ?? 0)) .
				substr($cfVariantOptions['fit'], 0, 3);

			// e.g. x1y0
			if(isset($cfVariantOptions['gravity'])) {
				$cfVariant .= $_a2s($cfVariantOptions['gravity'], true);
			}

			// e.g. br1sh2
			foreach($cfVariantName as $key => $value) {
				$cfVariant .= substr($key, 0, 2) . $value;
			}

			// e.g. srcset
			if(isset($options['suffix']) && !empty($options['suffix'])) {
				$cfVariant .= $_a2s($options['suffix'], true);
			}

			// The variant name must be alphanumeric and no longer than 100 chars
			$cfVariant = substr($this->wire()->sanitizer->alphanumeric($cfVariant), 0, 100);

			$endpoint = 'images/v1/variants';

			// Get the current variants
			// Cache the result for a day
			$cfVariants = $cache->getFor($this, $endpoint, 'daily', function() use ($endpoint) {
				$response = $this->apiRequest(
					$endpoint,
					[],
					'GET',
					false
				);
				return array_keys($response['result']['variants'] ?? []);
			});

			// If the number of variants is approaching the maximum (4/5 used), notify the admin
			$maxVariants = self::maxVariants;
			$numVariants = count($cfVariants);
			if($numVariants / $maxVariants > 0.8) {

				$cache->getFor($this, 'totalVariantsNotifyAdmin', 'daily', function() use ($config, $maxVariants, $numVariants) {

					$warning = sprintf(
						$this->_('The number of variants you have used (%1$d) is approaching the maximum of %2$d.'),
						$numVariants,
						$maxVariants
					);

					$this->log($warning);

					$adminEmail = $config->adminEmail;
					if($adminEmail) {
						$this->wire()->mail->new()
							->to($adminEmail)
							->subject(sprintf($this->_('%1$s on %2$s'), $this->className, $config->httpHost))
							->body($warning)
							->send();
						return 2; // logged and email sent
					}

					return 1; // only logged
				});
			}

			// If the variant does not exist
			if(!in_array($cfVariant, $cfVariants)) {
				// Create the variant
				$response = $this->apiRequest(
					$endpoint,
					[
						'id' => $cfVariant,
						'options' => $cfVariantOptions,
					],
				);
				// Add it to our cache
				$cfVariants[] = $cfVariant;
				$cache->saveFor($this, $endpoint, $cfVariants, 'daily');
			}

			// We need to add the variant to the filedata of the original
			// and the clone so it is available immediately
			$page = $this->wire()->pages->get($pageimage->page->id);
			$page->of(false);
			$pagefiles = $page->get($pageimage->field->name);
			foreach($pagefiles as $pagefile) {
				if($pagefile->basename === $pageimage->original->basename) {
					$this->variant($pageimage, $pageimage->basename, $cfVariant);
					$this->variant($pagefile, $pageimage->basename, $cfVariant);
					$this->saveQuietly($pagefile);
				}
			}
			$page->of(true);
		}
	}

	/**
	 * Add the file to Cloudflare
	 *
	 * @param Pagefile $pagefile
	 * @return string|null
	 *
	 */
	public function addToCloudflare(Pagefile $pagefile) {

		$uid = $this->uid($pagefile);

		if(!$uid) {

			$r2Only = false;
			if($this->useImages($pagefile)) {

				$boundary = '--' . self::formDataBoundary;
				$response = $this->apiRequest(
					'images/v1',
					"$boundary\r\n" .
					"Content-Disposition: form-data; name=\"url\"\r\n\r\n$pagefile->httpUrl\r\n" .
					"$boundary--\r\n\r\n"
				);

				$uid = $response['result']['id'] ?? null;

			} else if($this->useStream($pagefile)) {

				$response = $this->apiRequest(
					'stream/copy',
					[
						'url' => $pagefile->httpUrl,
						'meta' => [
							'name' => $this->getLabel($pagefile),
						],
						'allowedOrigins' => $this->allowedOrigins,
					]
				);

				$uid = $response['result']['uid'] ?? null;

			} else {

				$r2Only = true;
			}

			// All files are placed in R2 via s3 client
			// But we only need to set the uid if the file is only in the r2 bucket
			if(file_put_contents($pagefile->r2Path, fopen($pagefile->filename, 'r')) && $r2Only) {
				$uid = $pagefile->r2Key;
			}

			if(isset($uid)) {
				$this->uid($pagefile, $uid);
			}
		}

		return $uid;
	}

	/**
	 * Hook called after a page is rendered
	 *
	 * Look for local links that should be replaced with Cloudflare links
	 *
	 * @param HookEvent $event
	 *
	 */
	public function hookPageRender(HookEvent $event) {

		$page = $event->object;

		$contentType = $page->template->contentType;
		$isHTML = !$contentType || $contentType === 'html' || $contentType === 'text/html';
		if($isHTML) $isHTML = stripos($event->return, '</html>') !== false;
		$out = $event->return;

		if($isHTML) {

			$urlFiles = $this->wire()->config->urls('files');

			if(preg_match_all(
				'/="(' . str_replace('/', '\/', $urlFiles) . '\d+\/.*?)"/',
				$out,
				$matches
			)) {

				$fileFields = [];
				$replacements = [];

				foreach($matches[0] as $key => $fullMatch) {

					$matchUrl = $matches[1][$key];

					// If the file exists somewhere outside our files, skip
					if(strpos($matchUrl, $urlFiles) !== 0) continue;

					// Determine page id that owns file from its URL
					$id = str_replace($urlFiles, '', dirname($matchUrl));

					// If extended paths are in use, remove slashes
					if(strpos($id, '/') !== false) $id = str_replace('/', '', $id);

					// Get page from the id
					$id = (int) $id;
					$p = $id === $page->id ? $page : $this->wire()->pages->get($id);

					// If the page isn't a page, skip
					if(!$p->id) continue;

					// Get the image fields for this page
					if(!isset($fileFields[$p->id])) {

						$fileFields[$p->id] = [];

						foreach($p->template->fieldgroup as $field) {
							if(!$field->type instanceof FieldtypeFile && !$field->type instanceof FieldtypeImage) continue;
							$v = $p->get($field->name);
							if(empty($v)) continue;
							if($v instanceof Pagefile) $v = $v->pagefiles;
							if(!$v instanceof Pagefiles) continue;
							if(!$v->count()) continue;
							$fileFields[$p->id][$field->name] = $v;
						}
					}

					$pagefile = null;
					$filename = basename($matchUrl);

					foreach($fileFields[$p->id] as $fileField) {
						$pagefile = $fileField->getFile($filename);
						if($pagefile) break;
					}

					if($pagefile && $pagefile instanceof Pagefile && $this->uid($pagefile)) {

						if($pagefile instanceof Pageimage) {
							// Resize if a variation
							if(preg_match('/\.(\d+)x(\d+)(.*?)\./', $filename, $dimensions)) {
								$pagefile = $pagefile->size((int) $dimensions[1] ?: 0, (int) $dimensions[2] ?: 0, [
									'hidpi' => strpos($dimensions[3] ?? '', 'hidpi') !== false,
								]);
							}
							$replacements[$matchUrl] = $pagefile->url;
						} else {
							$replacements[$matchUrl] = $pagefile->url;
						}
					}
				}

				if(count($replacements)) {
					$out = str_replace(array_keys($replacements), array_values($replacements), $out);
				}
			}

			$event->return = $out;
		}
	}

	/**
	 * Get the name (label) of this
	 *
	 * @param Pagefile $pagefile
	 * @return string
	 *
	 */
	public function ___getLabel(Pagefile $pagefile) {
		return $this->wire()->sanitizer->truncate($pagefile->description ?: $pagefile->page->title ?: $pagefile->basename, 1024);
	}

	/**
	 * Send to the Cloudflare API
	 *
	 * @param string $endpoint
	 * @param array|string $data
	 * @param string $method
	 * @param bool $logErrors
	 * @return array
	 *
	 */
	protected function apiRequest($endpoint = '', $data = [], $method = 'POST', $logErrors = true) {

		$http = $this->wire(new WireHttp());

		if($endpoint) {
			$endpoint = "accounts/{$this->accountId}/$endpoint";
		} else {
			$endpoint = 'user/tokens/verify';
			$method = 'GET';
		}

		$contentType = 'application/json';
		if(!is_array($data)) {
			$contentType = 'multipart/form-data; boundary=' . self::formDataBoundary;
		} else if(count($data)) {
			$data = json_encode($data);
		}

		$response = $http
			->setTimeout(20)
			->setHeaders([
				'Authorization' => "Bearer {$this->accessToken}",
				'Content-Type' => $contentType,
			])
			->send(
				"https://api.cloudflare.com/client/v4/$endpoint",
				$data,
				$method,
				['use' => 'curl']
			);

		$response = $response ? (json_decode($response, 1) ?? [$response]) : [];
		if(!($response['success'] ?? false) && $logErrors) {
			$this->log(json_encode($response));
		}

		return $response;
	}

	/**
	 * Save a Pagefile's Page quietly
	 *
	 * This is used for saving Pagefile::filedata
	 *
	 * @param Pagefile $pagefile
	 * @return bool
	 *
	 */
	protected function saveQuietly(Pagefile $pagefile) {
		return $this->wire()->pages->___save($pagefile->page, [
			'noHooks' => true,
			'quiet' => true,
		]);
	}

	/**
	 * Get/set the UID in filedata
	 *
	 * @param Pagefile $pagefile
	 * @param mixed $value
	 * @return mixed
	 * @see Pagefile::filedata()
	 *
	 */
	protected function uid(Pagefile $pagefile, $value = null) {
		return $pagefile->filedata($this->className, $value);
	}

	/**
	 * Get/set the variant UID in filedata
	 *
	 * @param Pageimage $pageimage
	 * @param string $basename
	 * @param mixed $value
	 * @return mixed
	 * @see Pagefile::filedata()
	 *
	 */
	protected function variant(Pageimage $pageimage, $basename = '', $value = null) {
		if(empty($basename)) $basename = $pageimage->basename;
		return $pageimage->filedata("{$this->className}_{$basename}", $value);
	}

	/**
	 * Should Cloudflare Images be used for the Pagefile?
	 *
	 * @param Pagefile $pagefile
	 * @return bool
	 *
	 */
	protected function useImages(Pagefile $pagefile) {
		return $this->accountHash && $pagefile instanceof Pageimage;
	}

	/**
	 * Should Cloudflare Stream be used for the Pagefile?
	 *
	 * @param Pagefile $pagefile
	 * @return bool
	 *
	 */
	protected function useStream(Pagefile $pagefile) {
		return $this->customerSubdomain &&
			!$this->useImages($pagefile) &&
			in_array($pagefile->ext, explode(' ', self::streamExtensions));
	}
}
